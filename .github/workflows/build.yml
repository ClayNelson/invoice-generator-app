name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

env:
  APP_VERSION: 1.0.0

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        for i in {1..3}; do
          sudo apt-get update && \
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 \
            libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 x11-utils libxcb-cursor0 \
            libegl1 libopengl0 libgl1-mesa-dev && break || sleep 15
        done

    - name: Install Python dependencies
      run: |
        for i in {1..3}; do
          python -m pip install --upgrade pip && \
          pip install -r requirements.txt && break || sleep 15
        done

    - name: Run tests with coverage
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ":99.0"
        XDG_RUNTIME_DIR: "/tmp/runtime-runner"
        PYTHONPATH: "."
      run: |
        mkdir -p /tmp/runtime-runner
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        pytest tests/ --cov=. --cov-report=xml -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        flags: unittests
        name: invoice-generator
        fail_ci_if_error: false
        verbose: true
        directory: .
        token: ${{ secrets.CODECOV_TOKEN }}

  build-macos:
    needs: test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [macos-latest-xlarge, macos-14]
        include:
          - os: macos-latest-xlarge
            arch: intel
          - os: macos-14
            arch: arm64
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install gettext on macOS
      run: |
        for i in {1..3}; do
          brew install gettext && \
          brew link gettext --force && break || sleep 15
        done

    - name: Install Python dependencies
      run: |
        for i in {1..3}; do
          python -m pip install --upgrade pip setuptools wheel && \
          pip install -r requirements.txt && \
          pip install pyinstaller && break || sleep 15
        done

    - name: Create Info.plist
      run: |
        cat > Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDisplayName</key>
            <string>Invoice Generator</string>
            <key>CFBundleExecutable</key>
            <string>InvoiceGenerator-${{ matrix.arch }}</string>
            <key>CFBundleIconFile</key>
            <string>icon.icns</string>
            <key>CFBundleIdentifier</key>
            <string>com.claynelson.invoicegenerator</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>Invoice Generator</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ env.APP_VERSION }}</string>
            <key>CFBundleVersion</key>
            <string>${{ github.run_number }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15.0</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Build application
      env:
        DYLD_LIBRARY_PATH: /usr/local/opt/gettext/lib:$DYLD_LIBRARY_PATH
      run: |
        APP_NAME="InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}"
        pyinstaller --clean --windowed \
          --name "$APP_NAME" \
          --add-data "Info.plist:." \
          invoice_app.py

    - name: Import Code-Signing Certificates
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERT_P12_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      run: |
        # Validate required secrets
        if [ -z "$CERTIFICATE_BASE64" ]; then
          echo "Error: CERT_P12_BASE64 secret is not set"
          exit 1
        fi
        
        if [ -z "$CERTIFICATE_PASSWORD" ]; then
          echo "Error: CERT_PASSWORD secret is not set"
          exit 1
        fi
        
        # Generate a random keychain password
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Create temporary keychain
        KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
        echo "Creating keychain at $KEYCHAIN_PATH"
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || {
          echo "Error: Failed to create keychain"
          exit 1
        }
        
        echo "Setting keychain settings"
        security set-keychain-settings -t 3600 -l "$KEYCHAIN_PATH"
        
        # Import certificate to keychain
        echo "Decoding certificate"
        CERT_PATH="$RUNNER_TEMP/certificate.p12"
        echo -n "$CERTIFICATE_BASE64" | base64 --decode > "$CERT_PATH" || {
          echo "Error: Failed to decode certificate"
          exit 1
        }
        
        echo "Importing certificate"
        security import "$CERT_PATH" -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH" || {
          echo "Error: Failed to import certificate"
          exit 1
        }
        
        echo "Setting up keychain for codesign"
        # Add keychain to search list
        security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)
        security default-keychain -s "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Allow codesign to access keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH" || {
          echo "Error: Failed to set key partition list"
          exit 1
        }
        
        # Clean up
        rm "$CERT_PATH"
        echo "Certificate import completed successfully"

    - name: Sign Application
      run: |
        APP_NAME="InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}"
        # Sign the app bundle
        codesign --force --options runtime --sign "Developer ID Application" \
          --timestamp --verbose "dist/$APP_NAME/$APP_NAME.app"
        
        # Verify signature
        codesign --verify --verbose "dist/$APP_NAME/$APP_NAME.app"

    - name: Create DMG
      run: |
        APP_NAME="InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}"
        # Create a temporary DMG
        hdiutil create -srcfolder "dist/$APP_NAME" \
          -volname "Invoice Generator (${{ matrix.arch }})" \
          -fs HFS+ \
          -fsargs "-c c=64,a=16,e=16" \
          -format UDRW \
          "dist/$APP_NAME.dmg"

    - name: Sign DMG
      run: |
        APP_NAME="InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}"
        # Sign the DMG
        codesign --force --sign "Developer ID Application" \
          --timestamp --verbose "dist/$APP_NAME.dmg"

    - name: Notarize
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        APP_NAME="InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}"
        
        # Check if we have notarization credentials
        if [ -z "$APPLE_ID" ] || [ -z "$APPLE_APP_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
          echo "Warning: Notarization credentials not set, skipping notarization"
          exit 0
        fi
        
        # Submit for notarization
        xcrun notarytool submit "dist/$APP_NAME.dmg" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_APP_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --wait
        
        # Staple the notarization ticket
        xcrun stapler staple "dist/$APP_NAME.dmg"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: InvoiceGenerator-${{ matrix.arch }}
        path: dist/InvoiceGenerator-${{ matrix.arch }}-${{ env.APP_VERSION }}-${{ github.run_number }}.dmg
        retention-days: 5
        
  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.APP_VERSION }}-${{ github.run_number }}
        name: Release v${{ env.APP_VERSION }}-${{ github.run_number }}
        files: |
          InvoiceGenerator-intel/*.dmg
          InvoiceGenerator-arm64/*.dmg
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        generate_release_notes: true
