name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 \
          libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-xinerama0 libxcb-xfixes0 x11-utils libxcb-cursor0 \
          libegl1 libopengl0 libgl1-mesa-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with coverage
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ":99.0"
        XDG_RUNTIME_DIR: "/tmp/runtime-runner"
        PYTHONPATH: "."
      run: |
        mkdir -p /tmp/runtime-runner
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        pytest tests/ --cov=. --cov-report=xml -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        flags: unittests
        name: invoice-generator
        fail_ci_if_error: false
        verbose: true

  build-macos:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest-xlarge, macos-14]
        include:
          - os: macos-latest-xlarge
            arch: intel
          - os: macos-14
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build application
      run: |
        pyinstaller --clean --windowed --name "InvoiceGenerator-${{ matrix.arch }}" invoice_app.py

    - name: Create ZIP archive
      run: |
        cd dist
        zip -r "InvoiceGenerator-${{ matrix.arch }}.zip" "InvoiceGenerator-${{ matrix.arch }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: InvoiceGenerator-${{ matrix.arch }}
        path: dist/InvoiceGenerator-${{ matrix.arch }}.zip
        
  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        files: |
          InvoiceGenerator-intel/*.zip
          InvoiceGenerator-arm64/*.zip
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
