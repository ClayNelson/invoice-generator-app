name: Build macOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest-xlarge, macos-14]  # Intel and Apple Silicon
        include:
          - os: macos-latest-xlarge
            arch: intel
          - os: macos-14
            arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Install Python and dependencies
      run: |
        brew update
        brew install python@3.10 gettext
        brew unlink python@3.10 && brew link python@3.10
        brew unlink gettext && brew link gettext --force
        
        echo "Checking installations:"
        echo "Python path: $(brew --prefix python@3.10)/bin/python3.10"
        echo "Gettext path: $(brew --prefix gettext)"
        ls -la $(brew --prefix gettext)/lib/
        
        # Update PATH to prioritize Python 3.10
        echo "PATH=$(brew --prefix python@3.10)/bin:$PATH" >> $GITHUB_ENV

    - name: Verify Python version
      run: |
        which python3
        python3 --version
        python3.10 --version

    - name: Set up Python virtual environment
      run: |
        python3.10 -m venv venv
        source venv/bin/activate
        which python
        python --version
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install pyinstaller

    - name: Build application
      run: |
        source venv/bin/activate
        pyinstaller --clean --windowed --name "InvoiceGenerator-${{ matrix.arch }}" invoice_app.py

    - name: Debug certificate secret
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERT_P12_BASE64 }}
      run: |
        if [ -z "$CERTIFICATE_BASE64" ]; then
          echo "Error: CERT_P12_BASE64 repository secret is empty"
          echo "Please add this in GitHub repository Settings -> Secrets and variables -> Actions"
          exit 1
        fi
        echo "Certificate secret length: ${#CERTIFICATE_BASE64}"
        echo "First few characters (safely truncated): ${CERTIFICATE_BASE64:0:10}..."

    - name: Install the Apple certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.CERT_P12_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ github.run_id }}
      run: |
        echo "Setting up keychain..."
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain || true
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -l build.keychain
        
        echo "Creating certificate file..."
        # Try to detect and fix potential line breaks in the base64 string
        echo "$CERTIFICATE_BASE64" | tr -d '\n' | base64 --decode > certificate.p12
        
        echo "Verifying certificate file..."
        if [ ! -s certificate.p12 ]; then
          echo "Error: certificate.p12 is empty"
          echo "Debug: CERTIFICATE_BASE64 value type:"
          echo "$CERTIFICATE_BASE64" | base64 --decode | file -
          exit 1
        fi
        
        echo "Certificate file size: $(ls -l certificate.p12 | awk '{print $5}') bytes"
        echo "File type: $(file certificate.p12)"
        
        echo "Current keychains:"
        security list-keychains
        
        echo "Importing certificate..."
        security import certificate.p12 \
          -k build.keychain \
          -P "$CERTIFICATE_PASSWORD" \
          -T /usr/bin/codesign
        
        echo "Setting partition list..."
        security set-key-partition-list \
          -S apple-tool:,apple:,codesign: \
          -s \
          -k "$KEYCHAIN_PASSWORD" \
          build.keychain
        
        echo "Verifying certificate installation..."
        security find-certificate -a build.keychain
        
        echo "Cleaning up..."
        rm certificate.p12

    - name: Debug Team ID
      run: |
        echo "Checking environment variables..."
        echo "APPLE_TEAM_ID length: ${#APPLE_TEAM_ID}"
        if [ -z "$APPLE_TEAM_ID" ]; then
          echo "Error: APPLE_TEAM_ID repository secret is not set"
          echo "Please add this in GitHub repository Settings -> Secrets and variables -> Actions"
          exit 1
        else
          echo "APPLE_TEAM_ID value: $APPLE_TEAM_ID"
        fi
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: Sign the app bundle
      env:
        CERTIFICATE_PATH: ${{ runner.temp }}/build_certificate.p12
        KEYCHAIN_PATH: ${{ runner.temp }}/app-signing.keychain-db
        CERTIFICATE_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      run: |
        # Create entitlements file
        cat > entitlements.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.cs.allow-dyld-environment-variables</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
        </dict>
        </plist>
        EOF

        # Find the Developer ID Application certificate
        SIGNING_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | grep "Developer ID Application" | head -1 | cut -d '"' -f 2)
        if [ -z "$SIGNING_IDENTITY" ]; then
          echo "Error: Could not find Developer ID Application certificate"
          echo "Available certificates:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"
          exit 1
        fi
        
        echo "Using signing identity: $SIGNING_IDENTITY"

        # Sign the .app bundle with hardened runtime
        codesign --force --options runtime \
          --sign "$SIGNING_IDENTITY" \
          --entitlements entitlements.plist \
          --timestamp \
          dist/InvoiceGenerator-${{ matrix.arch }}.app

        # Verify signing
        codesign --verify -vvv dist/InvoiceGenerator-${{ matrix.arch }}.app
        
        # Show signing info
        codesign -d --verbose=4 dist/InvoiceGenerator-${{ matrix.arch }}.app

    - name: Notarize the app
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      run: |
        # Validate credentials
        if [ -z "$APPLE_ID" ]; then
          echo "Error: APPLE_ID repository secret is not set"
          echo "Please add this in GitHub repository Settings -> Secrets and variables -> Actions"
          exit 1
        fi
        
        if [ -z "$APPLE_APP_PASSWORD" ]; then
          echo "Error: APPLE_APP_PASSWORD repository secret is not set"
          echo "Please add this in GitHub repository Settings -> Secrets and variables -> Actions"
          exit 1
        fi
        
        if [ -z "$APPLE_TEAM_ID" ]; then
          echo "Error: APPLE_TEAM_ID repository secret is not set"
          echo "Please add this in GitHub repository Settings -> Secrets and variables -> Actions"
          exit 1
        fi
        
        echo "Notarization credentials (repository secrets):"
        echo "Apple ID: $APPLE_ID"
        echo "Team ID: $APPLE_TEAM_ID"
        echo "App password length: ${#APPLE_APP_PASSWORD}"
        
        echo "Checking dist directory structure..."
        ls -R dist/
        
        # Find the .app bundle
        APP_PATH=$(find dist -name "InvoiceGenerator-${{ matrix.arch }}.app" -type d)
        if [ -z "$APP_PATH" ]; then
          echo "Error: InvoiceGenerator-${{ matrix.arch }}.app not found"
          echo "Contents of dist directory:"
          ls -la dist
          exit 1
        fi
        
        echo "Found app bundle at: $APP_PATH"
        cd $(dirname "$APP_PATH")
        
        echo "Creating notarization package..."
        # Create ZIP for notarization
        ditto -c -k --keepParent "$(basename "$APP_PATH")" "InvoiceGenerator-${{ matrix.arch }}-unnotarized.zip"
        
        if [ ! -f "InvoiceGenerator-${{ matrix.arch }}-unnotarized.zip" ]; then
          echo "Error: Failed to create notarization package"
          exit 1
        fi
        
        echo "Package size: $(ls -lh "InvoiceGenerator-${{ matrix.arch }}-unnotarized.zip" | awk '{print $5}')"
        
        echo "Submitting for notarization..."
        # Submit for notarization with detailed output
        NOTARY_OUTPUT=$(xcrun notarytool submit "InvoiceGenerator-${{ matrix.arch }}-unnotarized.zip" \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_APP_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --wait 2>&1)
        
        NOTARY_EXIT_CODE=$?
        echo "$NOTARY_OUTPUT"
        
        if [ $NOTARY_EXIT_CODE -ne 0 ]; then
          echo "Error: Notarization submission failed"
          echo "Full error output:"
          echo "$NOTARY_OUTPUT"
          exit 1
        fi
        
        # Check if notarization was invalid
        if echo "$NOTARY_OUTPUT" | grep -q "status: Invalid"; then
          echo "Error: Notarization came back as Invalid"
          echo "This usually means the app bundle doesn't meet Apple's requirements."
          echo "Common issues:"
          echo "1. Code signing issues"
          echo "2. Missing or invalid entitlements"
          echo "3. Hardened runtime not enabled"
          echo "4. Invalid bundle identifier"
          
          # Get detailed log info
          SUBMISSION_ID=$(echo "$NOTARY_OUTPUT" | grep -o 'id: [a-z0-9-]*' | head -n1 | cut -d' ' -f2 | tr -d '\n' | tr -d '\r')
          if [ ! -z "$SUBMISSION_ID" ]; then
            echo "Getting detailed log for submission $SUBMISSION_ID..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_PASSWORD" \
              --team-id "$APPLE_TEAM_ID"
          fi
          exit 1
        fi
        
        # Extract submission ID for status check (only first occurrence)
        SUBMISSION_ID=$(echo "$NOTARY_OUTPUT" | grep -o 'id: [a-z0-9-]*' | head -n1 | cut -d' ' -f2 | tr -d '\n' | tr -d '\r')
        if [ ! -z "$SUBMISSION_ID" ]; then
          echo "Checking detailed status for submission $SUBMISSION_ID..."
          xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --team-id "$APPLE_TEAM_ID"
        fi
        
        echo "Stapling notarization ticket..."
        # Staple the notarization ticket
        xcrun stapler staple "$(basename "$APP_PATH")"
        
        if [ $? -ne 0 ]; then
          echo "Error: Failed to staple notarization ticket"
          exit 1
        fi
        
        echo "Creating final package..."
        # Create final ZIP
        ditto -c -k --keepParent "$(basename "$APP_PATH")" "InvoiceGenerator-${{ matrix.arch }}.zip"
        
        if [ ! -f "InvoiceGenerator-${{ matrix.arch }}.zip" ]; then
          echo "Error: Failed to create final package"
          exit 1
        fi
        
        echo "Notarization process completed successfully"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: InvoiceGenerator-${{ matrix.arch }}
        path: dist/InvoiceGenerator-${{ matrix.arch }}.zip
        
  create-release:
    needs: build-macos
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        files: |
          InvoiceGenerator-intel/*.zip
          InvoiceGenerator-arm64/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
